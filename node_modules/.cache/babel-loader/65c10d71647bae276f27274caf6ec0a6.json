{"ast":null,"code":"export class ConfigManager {\n  constructor(config = {}) {\n    this.config = global.CONFIG ? { ...global.CONFIG,\n      ...config\n    } : { ...config\n    };\n  }\n\n  get(name, defaultValue) {\n    const parts = name.split('.');\n    let context = this.config;\n    let value = null;\n\n    for (const i in parts) {\n      const part = parts[i];\n      value = context[part];\n      context = value;\n    }\n\n    return value || defaultValue;\n  }\n\n  add(conf) {\n    if (conf) {\n      this.config = { ...this.config,\n        ...conf\n      };\n    }\n  }\n\n}\nconst config = new ConfigManager();\nexport default config;","map":{"version":3,"sources":["C:/Users/abhijith.ponnapally/smart-react-app-template/src/utils/ConfigManager.js"],"names":["ConfigManager","constructor","config","global","CONFIG","get","name","defaultValue","parts","split","context","value","i","part","add","conf"],"mappings":"AAAA,OAAO,MAAMA,aAAN,CAAoB;AACzBC,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AACvB,SAAKA,MAAL,GAAcC,MAAM,CAACC,MAAP,GAAgB,EAAE,GAAGD,MAAM,CAACC,MAAZ;AAAqB,SAAGF;AAAxB,KAAhB,GAAmD,EAAE,GAAGA;AAAL,KAAjE;AACD;;AAEDG,EAAAA,GAAG,CAACC,IAAD,EAAOC,YAAP,EAAqB;AACtB,UAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAd;AACA,QAAIC,OAAO,GAAG,KAAKR,MAAnB;AACA,QAAIS,KAAK,GAAG,IAAZ;;AACA,SAAK,MAAMC,CAAX,IAAgBJ,KAAhB,EAAuB;AACrB,YAAMK,IAAI,GAAGL,KAAK,CAACI,CAAD,CAAlB;AACAD,MAAAA,KAAK,GAAGD,OAAO,CAACG,IAAD,CAAf;AACAH,MAAAA,OAAO,GAAGC,KAAV;AACD;;AACD,WAAOA,KAAK,IAAIJ,YAAhB;AACD;;AAEDO,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,QAAIA,IAAJ,EAAU;AACR,WAAKb,MAAL,GAAc,EACZ,GAAG,KAAKA,MADI;AAEZ,WAAGa;AAFS,OAAd;AAID;AACF;;AAxBwB;AA2B3B,MAAMb,MAAM,GAAG,IAAIF,aAAJ,EAAf;AACA,eAAeE,MAAf","sourcesContent":["export class ConfigManager {\r\n  constructor(config = {}) {\r\n    this.config = global.CONFIG ? { ...global.CONFIG , ...config } : { ...config };\r\n  }\r\n\r\n  get(name, defaultValue) {\r\n    const parts = name.split('.');\r\n    let context = this.config;\r\n    let value = null;\r\n    for (const i in parts) {\r\n      const part = parts[i];\r\n      value = context[part];\r\n      context = value;\r\n    }\r\n    return value || defaultValue;\r\n  }\r\n\r\n  add(conf) {\r\n    if (conf) {\r\n      this.config = {\r\n        ...this.config,\r\n        ...conf\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst config = new ConfigManager();\r\nexport default config;"]},"metadata":{},"sourceType":"module"}